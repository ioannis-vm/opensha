/*
 * Global build file used by all OpenSHA subprojects.
 * Declares common fields and tasks.
 * 
 * This file requires that the 'parentProject' property be defined (should be null for top level project)
 */

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
compileJava.options.encoding = "UTF-8"

repositories {
    mavenCentral()
    maven {
        url "https://code.usgs.gov/api/v4/groups/1352/-/packages/maven"
        name "NSHMP GitLab Group"
    }
}

configurations {
    apiResolvable {
        description 'resolvable view of the api classpath'
        canBeResolved=true

        extendsFrom api
    }
}

configurations {
    implResolvable {
        description 'resolvable view of the implementation classpath'
        canBeResolved=true

        extendsFrom implementation
    }
}

ext.getDate = {
    new Date().format('yyyy_MM_dd')
}

ext.getGitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return ""
    }
}

ext.getGitLongHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return ""
    }
}

ext.getGitBranch = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return ""
    }
}

void writeBuildFiles() {
    logger.info("Writing build.date file")
    new File(projectDir, "build.date").text = new Date().toString()+"\n"+System.currentTimeMillis()+"\n"
    String hash = getGitLongHash()
    if (hash?.trim()) {
        logger.info("Writing build.githash file: "+hash)
        new File(projectDir, "build.githash").text = hash+"\n"
    }
    String branch = getGitBranch()
    if (branch?.trim()) {
        logger.info("Writing build.gitbranch file: "+branch)
        new File(projectDir, "build.gitbranch").text = branch+"\n"
    }
}

logger.info('running settings with project='+project.name+' and rootProject.name='+rootProject.name)
if (project.parentProject != null) {
    logger.info(project.name+" is a child of: "+project.parentProject)
} else {
    logger.info(project.name+" is top level")
}

if (project.parentProject != null) {
    jar {
        // include version files
        from(project(':opensha').projectDir) {
            include 'build.version'
        }
        from(project.projectDir) {
            include 'build.githash'
            include 'build.gitbranch'
            include 'build.date'
        }
    }
    logger.info('Defining fatJar task in '+project.name+" that depends on "+project.parentProject)
    task fatJar(type: Jar, dependsOn: ':'+project.parentProject+':fatJar') {
        doFirst {
            writeBuildFiles()
        }
        archiveBaseName = project.name + '-all'
        // include all 'api' dependencies
        from {
            configurations.apiResolvable.collect { it.isDirectory() ? it : zipTree(it).matching {
                exclude { it.path.contains('META-INF') }
            }}
        }
        // include compiled source from this project
        from sourceSets.main.allJava
        // include upstream project fat jar
        from zipTree(file('../'+project.parentProject+'/build/libs/'+project.parentProject+'-all.jar')).matching {
            exclude 'build.githash'
            exclude 'build.gitbranch'
            exclude 'build.date'
        }
    
        duplicatesStrategy = 'exclude'
        with jar
    }
} else {
    jar {
	// include version files
        from(project.projectDir) {
            include 'build.version'
            include 'build.githash'
            include 'build.gitbranch'
            include 'build.date'
        }
    }
    task fatJar(type: Jar) {
        doFirst {
            writeBuildFiles()
        }
        archiveBaseName = project.name + '-all'
        // include all 'api' dependencies
        from {
            configurations.apiResolvable.collect { it.isDirectory() ? it : zipTree(it).matching {
                exclude { it.path.contains('META-INF') }
            }}
        }
        // include compiled source from this project
        from sourceSets.main.allJava
    
        duplicatesStrategy = 'exclude'
        with jar
    }
}

void createAppTask(String taskName, String prefix, String mainClass) {
    // old default prefix was: prefix+'-'+getDate()+'-'+getGitHash()
    if (project.parentProject != null) {
        task (taskName, type: Jar, dependsOn: ':'+project.parentProject+':fatJar') {
            doFirst {
                writeBuildFiles()
            }
            archiveBaseName = prefix
            from { configurations.apiResolvable.collect {
                it.isDirectory() ? it : zipTree(it).matching {
                    exclude { it.path.contains('META-INF') }
                }
            }}
            // include compiled source from this project
            from sourceSets.main.allJava
            // include upstream project fat jar
            from zipTree(file('../'+project.parentProject+'/build/libs/'+project.parentProject+'-all.jar')).matching {
                exclude 'build.githash'
                exclude 'build.gitbranch'
                exclude 'build.date'
                exclude { it.path.contains('META-INF') }
            }
            // include version files
            from(project(':opensha').projectDir) {
                include 'build.version'
            }
            from(project.projectDir) {
                include 'build.githash'
                include 'build.gitbranch'
                include 'build.date'
            }
            manifest {
                attributes(
                    'Class-Path': configurations.apiResolvable.collect { it.getName() }.join(' '),
                    'Main-Class': mainClass
                )
            }
            
            duplicatesStrategy = 'exclude'
            with jar
        }
    } else {
        task (taskName, type: Jar) {
            doFirst {
                writeBuildFiles()
            }
            archiveBaseName = prefix
            from { configurations.apiResolvable.collect {
                it.isDirectory() ? it : zipTree(it).matching {
                    exclude { it.path.contains('META-INF') }
                }
            }}
            // include compiled source from this project
            from sourceSets.main.allJava
            // include version files
            from(project.projectDir) {
                include 'build.version'
            }
            from(project.projectDir) {
                include 'build.githash'
                include 'build.gitbranch'
                include 'build.date'
            }
            manifest {
                attributes(
                    'Class-Path': configurations.apiResolvable.collect { it.getName() }.join(' '),
                    'Main-Class': mainClass
                )
            }
            
            duplicatesStrategy = 'exclude'
            with jar
        }
    }
}

// make that method visible
ext {
    createAppTask = this.&createAppTask
}
